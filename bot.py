  
import telebot
import random
 
from telebot import types
 
TOKEN = '—Ç–æ–∫–µ–Ω –±–æ—Ç–∞' 
bot = telebot.TeleBot(TOKEN)
 
@bot.message_handler(commands=['start'])
def welcome(message):
 
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤")
    item2 = types.KeyboardButton("–£—Å—ñ —Ä–µ—Ü–µ–ø—Ç–∏")
    item3 = types.KeyboardButton("–ó–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏")
 
    markup.add(item1, item2, item3)
 
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç, –≤ —è–∫–æ–º—É –∑—ñ–±—Ä–∞–Ω–æ –¥—É–∂–µ –±–∞–≥–∞—Ç–æ —Ä–µ—Ü–µ–ø—Ç—ñ–≤".format(message.from_user, bot.get_me()),
        parse_mode='html', reply_markup=markup)
 
@bot.message_handler(content_types=['text'])
def ui_message(message):
    if message.chat.type == 'private':
        if message.text == '–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤':
            bot.send_message(message.chat.id, '–§—É–Ω–∫—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
            if message.text == '–ó–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏':

            	markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–£—Å—ñ —Ä–µ—Ü–µ–ø—Ç–∏", callback_data='all_rcp')
            item2 = types.InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç", callback_data='add_rcp')
 
            markup.add(item1, item2)
 
            bot.send_message(message.chat.id, '–ó–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏:', reply_markup=markup)

        elif message.text == '–£—Å—ñ —Ä–µ—Ü–µ–ø—Ç–∏':
 
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–†–µ—Ü–µ–ø—Ç 1", callback_data='rcp1')
            item2 = types.InlineKeyboardButton("–†–µ—Ü–µ–ø—Ç 2", callback_data='rcp2')
 
            markup.add(item1, item2)
 
            bot.send_message(message.chat.id, '–û—Å—å —Ç–≤–æ—ó —Ä–µ—Ü–µ–ø—Ç–∏', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —â–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ üò¢')
 
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    rec_1 = open('recipes/recipe_1.txt', 'r')
    rec_2 = open('recipes/recipe_2.txt', 'r')
    try:
        if call.message:
            if call.data == 'rcp1':
                bot.send_message(call.message.chat.id, rec_1)
            elif call.data == 'rcp2':
                bot.send_message(call.message.chat.id, rec_2)

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–£—Å—ñ —Ä–µ—Ü–µ–ø—Ç–∏",
                reply_markup=None)

 @bot.callback_query_handler(func=lambda call: True)
def callback_inline_2(call):
	#–ó–≤'—è–∑–æ–∫ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    try:
        if call.message:
            if call.data == 'all_recp':
                bot.send_message(call.message.chat.id, '–£—Å—ñ —Ç–≤–æ—ó —Ä–µ—Ü–µ–ø—Ç–∏:')
            elif call.data == 'add_recp':
                bot.send_message(call.message.chat.id, '–î–æ–¥–∞—Ç–∏ –ø–æ –Ω–∞–∑–≤—ñ')

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ó–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏",
                reply_markup=None)

 
    except Exception as e:
        print(repr(e))
 
# RUN
bot.polling(none_stop=True)